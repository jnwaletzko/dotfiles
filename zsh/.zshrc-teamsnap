export PATH=$PATH:~/.bin

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# place this after nvm initialization!
autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Generic gcloud Aliases
alias gccl="gcloud config configurations list"
alias gcca="gcloud config configurations activate $1"
alias gcil="gcloud compute instances list"
alias gcid="gcloud compute instances describe $1"
alias gsil="gcloud sql instances list"
alias gkl="gcloud container clusters list"
alias gkc="gcloud container clusters get-credentials $1"
alias signup_c="kctl exec -it deployments/signup-service -n signup-service -- bin/signup remote"
alias order_c="kctl exec -it deployments/order-service -n order-service -- bin/order_service remote"
alias payment_c="kctl exec -it deployments/payment-service -n payment-service -- bin/payment_service remote"
alias org_c="kctl exec -it deployments/organization-service -n organization-service -- bin/organization remote"
alias orgapi_c="kctl exec -it deployments/organization-api -n organization-api -- bin/organization_api remote"
alias orgr_c="kctl exec -it deployments/organization-reporting-service -n organization-reporting-service -- bin/reporting remote"
alias classic_c="kctl exec -it deployments/classic -n classic -- script/console"
alias snapi_c="kctl exec -it deployments/snapi-monolith -n snapi -- bundle exec rails c"
alias tst="kctl exec -it deployments/tournaments-api -n tournaments-api -- bin/fan_app remote"
alias tier1="sdm k8s update-config prod-us-east1-tier-1"
alias summer1="sdm k8s update-config prod-us-east1-summer-1"
alias spring1="sdm k8s update-config staging-us-east1-spring-1"

# SSH to a specific Google Cloud Instance
gssh () {
  gcloud compute ssh --internal-ip --zone "$(gcloud compute instances list --format="value(ZONE)" --filter="name=$1")" $1
}
# SSH to the first server that matches the name
tssh () {
  compute_instance_info=$(gcloud compute instances list --format="value(NAME,ZONE)" --filter="name:$1" | head -n 1)
  compute_instance_name="$(echo -n $compute_instance_info | awk '{print $1}')"
  compute_instance_zone="$(echo -n $compute_instance_info | awk '{print $2}')"
  gcloud compute ssh --internal-ip --zone "$compute_instance_zone" "$compute_instance_name"
}


# Kubernetes Aliases
alias kctl="kubectl"                                      ## Those extra three characters make a difference!
alias ktopnode="kubectl top node"                         ## Show CPU/Memory resource usage across all nodes in k8s cluster
alias ktoppod="kubectl top pod --all-namespaces"          ## Show CPU/Memory resource usage across all PODs in a k8s cluster


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jakewaletzko/teamsnap/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/jakewaletzko/teamsnap/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jakewaletzko/teamsnap/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/jakewaletzko/teamsnap/google-cloud-sdk/completion.zsh.inc'; fi
